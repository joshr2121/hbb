
var tracks : Figure8[];

var notePrefab : GameObject;
var noteWrongPrefab : GameObject;
var noteRightPrefab : GameObject;

private var noteObjs = new Array();

function CreateNote( note : Note, gs : GameState, startGroup : int )
{
	var group = startGroup;
	var delta = Time.timeSinceLevelLoad - gs.measureStartTime - gs.roundStartTime;
	var measureFrac = (gs.GetSecsPerMeasure() + delta - note.measureTime)
		/ gs.GetSecsPerMeasure();
	
	// next group?
	if( measureFrac > 1.0 )
	{
		group = (group+1)%4;
		measureFrac -= 1.0;
	}

	var pos = tracks[ note.sample ].GetPositionForMTime( measureFrac, group );

	// determine note type
	var prefab = null;
	if( gs.GetIsImproving() )
	{
		prefab = notePrefab;
	}
	else if( gs.GetIsListening() )
	{
		//if( note.measureTime < delta )
			//prefab = noteRightPrefab;
		//else
			prefab = notePrefab;
	}
	else
	{
		if( note.wasHit )
		{
			prefab = noteRightPrefab;
		}
		else
		{
			// opportunity to hit note past?
			if( (note.measureTime+gs.timeTolSecs) < delta )
				// yep..didn't get it
				prefab = noteWrongPrefab;
			else
				prefab = notePrefab;
		}
	}

	var obj : GameObject = Instantiate( prefab, pos, Quaternion.identity );
	return obj;
}

function GetCurrentStartGroup( gs : GameState )
{
	if( gs.state == RCState.IMPROV )
	{
		if( gs.activePlayer == 0 )
			return 3;
		else
			return 1;
	}
	else if( gs.state == RCState.LISTEN )
	{
		if( gs.activePlayer == 1 )
			return 0;
		else
			return 2;
	}
	else if( gs.state == RCState.OTHER_PROVE )
	{
		if( gs.activePlayer == 1 )
			return 1;
		else
			return 3;
	}
	else if( gs.state == RCState.OTHER_OK )
	{
		return -1;
	}
	else if( gs.state == RCState.OTHER_FAIL )
	{
		if( gs.activePlayer == 0 )
			return 2;
		else
			return 0;
	}
	else if( gs.state == RCState.PROVE )
	{
		if( gs.activePlayer == 0 )
			return 3;
		else
			return 1;
	}
	else if( gs.state == RCState.POST_PROVE )
	{
		return -1;
	}
}

function Update () {
	var gs : GameState = GameState.inst;

	Utils.DestroyObjs( noteObjs );
	noteObjs.Clear();

	var beat = gs.GetActiveBeat();
	var startGroup = GetCurrentStartGroup(gs);

	if( startGroup != -1 )
	{
		for( var i = 0; i < beat.length; i++ )
		{
			var obj = CreateNote( beat[i], gs, startGroup );
			noteObjs.Push(obj);
		}
	}

}